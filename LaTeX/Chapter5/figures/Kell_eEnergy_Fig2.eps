%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 464.000000 305.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 464 305
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 464 305
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Italic
%!FontType1-1.0: HelveticaNeue-Italic 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Italic def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /y put
dup 34 /X put
dup 35 /uni03B6 put
dup 36 /asterisk put
dup 37 /uni03B5 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -993 1 index div -481 2 index div 1511 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/asterisk 1 def
/X 2 def
/y 3 def
/uni03B5 4 def
/uni03B6 5 def
/u20BC 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-993 -481 1511 1077}def
/UniqueID 4265036 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C977ACEB10D7B7CCAA782B3E10A4BEAFD6991C7A5E7DAF786CA93E9C7130DEBD28BA4C9AFE43A4D076FADC2F9A5060FFDA38C73F5D27D5516C3C835CF8479B24EDAC1EDAB13DB00EB258C07233E959745D3BB1B2BB1202E9CEC2CBDD53ED4344504D8DFD9279F19858553DA9FE593D15B4D64F576731699445C1C89A817074CF574A9CF578D970385738AC59E9F49C465DC7F369182704F44653AF537CDAD890B785D583BF44C5D31BCB0372DD770B62330CAA424FFAD6A54C9CF680A6896A34407E525AA46524B8AF54D46C32203E922F56E201C9AF842B848C21853F3A8CBE5220CB083765312A2D8CF21F4F3F8220CDC97751918619EA9E3870E509C52814768E8258E52D6D190F9F99D1878C25DC9B80D9A9B334D56653656F5B43B0C0FC92CA74C7B93AD7810B7DDE0C842F2C96B3186291D4AE04161CBDB28267DD95B5C44C26733D7AD47E3DCE6F5ADE2FC04D158D599A0E589FBD2382EF5FE5AE2F0148E6823A6F83109266C7066BE42AC2ACFFB372A706CE2EF2008D949FACD97A32E39C812EDA38B436E2297C9AFF0AD8987D4E143C0918FC1E3795064AD277049D46913CE66D73BDD10B11E8D1F4098C3EF36B6A21815C19630AEAFE0F49E1268B5AE0C862D91C32CEEE91E92CC8FD85E5D1261EDD7C52F15E16D834F5D1390E6573F18EA96884E3C0ADE7779541F306CF20FD653AB89F994AFEF6B6232065ABFD1DFB470E78D04DCB9E1B9A1E7621FF80C6344B8A61025A329086C92564B8843DB8B
0C2D16E30EED9FB17685884DC9529F775DCFC5779C1D3B3E784FAD1063394ACB98FD58C139EEF6F11854761EF8B0D6C2B154552B45777CB8FAA4225E8BC11BF6C08C7C9E906927651617A6D5CCEAA22F947946AC953A7A434E1C82EB906FEB058A47DE5BC4F45E39E12B7AC3ED9D67A537C8F890633EA525719064261106178C7856E0ECE47C5D37FAE837FDEF6372199B9642221F14B3900E129C016B73FA1CEE4D4302F4F9E7D94695C47D63F7B167E918E28FE425D7433268808C456842679937445D45028C88849B42071615D2DBA9A55AC5D44D39A0EB637BDB0EEF427BD1AD1E6C80C4960E0A5B16D6AEB3A0596B673FF1AECC072B463454BC4CB8CC9D747B2DB3E2408CF5E9E9232F194FE7A0C4BA615B0FEC976AB114DA1CE8826A6764B97111758A722824EB494CBEFD7B39042F946C07B9AD831EFF96DCC3614C0D8EA0C783B162FDBC9B599B1FF13C266A7F89CF2741D1F7F91F6F753B29C7AA7756645F245972D89A01BEBCA273C9AA61236FF383748CE96067E5EA214B7632682F3E3082D20DFA7763CEFC66EFF1E2CC03D02AA78C49AF8AACFEBCC9E0D9B69001CC8BBD3936F74BE4F90DCABB1AECAB608354C5410514FB8FDF6138BC06FED30556185FD3D5E5FD28685C6488DB11FFD93F2B0A9E338EA52819BD395257A29CCC13ED72C8A0AA2517FCDDB70683EA3BD58A3AEE4D293753D8B88D1723985F57FD6E7EB567BC0CD7DFD799
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Italic cguidfix
/F1.1/HelveticaNeue-Italic renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 464 305 rc
-858 438 m
1086 438 l
1086 -668 l
-858 -668 l
h
-858 438 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -858 438 cm
864 432 m
864 153.89999 l
S
0 i
CM
6 292.10001 m
3 284.10001 l
9 284.10001 l
h
6 292.10001 m
f
0 J
0 j
1 0 0 -1 -858 438 cm
864 145.89999 m
861 153.89999 l
867 153.89999 l
h
864 145.89999 m
S
1 J
1 j
0.60000002 i
864 432 m
1309.2133 432 l
S
0 i
CM
459.2132 6 m
451.2132 9 l
451.2132 3 l
h
459.2132 6 m
f
0 J
0 j
1 0 0 -1 -858 438 cm
1317.2133 432 m
1309.2133 429 l
1309.2133 435 l
h
1317.2133 432 m
S
1 J
1 j
0.60000002 i
864 314.69299 m
864 314.69299 924.90564 368.76123 981 351 c
1037.0944 333.23877 972.75891 269.84821 1062 252 c
1151.2411 234.15178 1229.7067 277.80103 1296 288 c
1296 288 l
S
[
16
9
1
9
] 0 d
864 350.69299 m
864 350.69299 909.60712 404.76123 981 387 c
1052.3928 369.23877 1026.7589 305.84821 1116 288 c
1205.2411 270.15179 1245.0051 313.80103 1296 324 c
1296 324 l
S
864 269.69299 m
864 269.69299 915.90564 305.76123 972 288 c
1028.0944 270.23877 970.20917 219.74872 1062 207 c
1153.7908 194.25128 1229.7067 232.80103 1296 243 c
1296 243 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 27.5 281.5351 cm
/F1.1[ 30 0 0 -30 0 0]sf
-7.2150002 11.080002 m
(!)s
1 0 0 -1 434.5 33 cm
-9.165 11.080002 m
(")s
/Cs1 SC
0 0 0 sc
CM
373.68198 58.681976 m
375.43933 56.924618 375.43933 54.075382 373.68198 52.318024 c
371.92462 50.560658 369.07538 50.560658 367.31802 52.318024 c
365.56067 54.075382 365.56067 56.924618 367.31802 58.681976 c
369.07538 60.439342 371.92462 60.439342 373.68198 58.681976 c
f
[] 0 d
0.60000002 i
1 0 0 -1 -858 438 cm
1231.682 379.31802 m
1233.4393 381.07538 1233.4393 383.92462 1231.682 385.68198 c
1229.9246 387.43933 1227.0754 387.43933 1225.318 385.68198 c
1223.5607 383.92462 1223.5607 381.07538 1225.318 379.31802 c
1227.0754 377.56067 1229.9246 377.56067 1231.682 379.31802 c
S
0 i
CM
436.68198 148.68198 m
438.43933 146.92462 438.43933 144.07538 436.68198 142.31802 c
434.92462 140.56065 432.07538 140.56065 430.31802 142.31802 c
428.56067 144.07538 428.56067 146.92462 430.31802 148.68198 c
432.07538 150.43935 434.92462 150.43935 436.68198 148.68198 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
1294.682 289.31802 m
1296.4393 291.07538 1296.4393 293.92462 1294.682 295.68198 c
1292.9246 297.43933 1290.0754 297.43933 1288.318 295.68198 c
1286.5607 293.92462 1286.5607 291.07538 1288.318 289.31802 c
1290.0754 287.56067 1292.9246 287.56067 1294.682 289.31802 c
S
0 i
CM
300.2756 231.74916 m
302.03296 229.99181 302.03296 227.14256 300.2756 225.38521 c
298.51825 223.62784 295.66901 223.62784 293.91165 225.38521 c
292.15427 227.14256 292.15427 229.99181 293.91165 231.74916 c
295.66901 233.50653 298.51825 233.50653 300.2756 231.74916 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
1158.2756 206.25084 m
1160.033 208.00819 1160.033 210.85744 1158.2756 212.61479 c
1156.5182 214.37216 1153.6689 214.37216 1151.9116 212.61479 c
1150.1543 210.85744 1150.1543 208.00819 1151.9116 206.25084 c
1153.6689 204.49347 1156.5182 204.49347 1158.2756 206.25084 c
S
0 i
CM
342.68994 179.09079 m
344.44733 177.33344 344.44733 174.48419 342.68994 172.72684 c
340.93259 170.96947 338.08334 170.96947 336.32599 172.72684 c
334.56863 174.48419 334.56863 177.33344 336.32599 179.09079 c
338.08334 180.84816 340.93259 180.84816 342.68994 179.09079 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
1200.6899 258.90921 m
1202.4473 260.66656 1202.4473 263.51581 1200.6899 265.27316 c
1198.9326 267.03052 1196.0834 267.03052 1194.326 265.27316 c
1192.5686 263.51581 1192.5686 260.66656 1194.326 258.90921 c
1196.0834 257.15186 1198.9326 257.15186 1200.6899 258.90921 c
S
0 i
CM
266.10394 192.95085 m
267.8613 191.1935 267.8613 188.34425 266.10394 186.5869 c
264.34659 184.82953 261.49734 184.82953 259.73999 186.5869 c
257.9826 188.34425 257.9826 191.1935 259.73999 192.95085 c
261.49734 194.70822 264.34659 194.70822 266.10394 192.95085 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
1124.1039 245.04915 m
1125.8613 246.8065 1125.8613 249.65575 1124.1039 251.4131 c
1122.3466 253.17047 1119.4973 253.17047 1117.74 251.4131 c
1115.9827 249.65575 1115.9827 246.8065 1117.74 245.04915 c
1119.4973 243.29178 1122.3466 243.29178 1124.1039 245.04915 c
S
0 i
CM
227.93579 142.32114 m
229.69316 140.56378 229.69316 137.71454 227.93579 135.95718 c
226.17844 134.19981 223.32919 134.19981 221.57184 135.95718 c
219.81447 137.71454 219.81447 140.56378 221.57184 142.32114 c
223.32919 144.07851 226.17844 144.07851 227.93579 142.32114 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
1085.9358 295.67886 m
1087.6931 297.43622 1087.6931 300.28546 1085.9358 302.04282 c
1084.1785 303.80017 1081.3292 303.80017 1079.5719 302.04282 c
1077.8145 300.28546 1077.8145 297.43622 1079.5719 295.67886 c
1081.3292 293.92151 1084.1785 293.92151 1085.9358 295.67886 c
S
0 i
CM
161.57185 164.332 m
163.32922 162.57465 163.32922 159.7254 161.57185 157.96805 c
159.8145 156.21068 156.96527 156.21068 155.2079 157.96805 c
153.45055 159.7254 153.45055 162.57465 155.2079 164.332 c
156.96527 166.08937 159.8145 166.08937 161.57185 164.332 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
1019.5718 273.668 m
1021.3292 275.42535 1021.3292 278.2746 1019.5718 280.03195 c
1017.8145 281.78934 1014.9653 281.78934 1013.2079 280.03195 c
1011.4506 278.2746 1011.4506 275.42535 1013.2079 273.668 c
1014.9653 271.91064 1017.8145 271.91064 1019.5718 273.668 c
S
0 i
CM
148.68198 130.68198 m
150.43935 128.92462 150.43935 126.07538 148.68198 124.31802 c
146.92462 122.56065 144.07538 122.56065 142.31802 124.31802 c
140.56065 126.07538 140.56065 128.92462 142.31802 130.68198 c
144.07538 132.43935 146.92462 132.43935 148.68198 130.68198 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
1006.682 307.31802 m
1008.4393 309.07538 1008.4393 311.92462 1006.682 313.68198 c
1004.9246 315.43933 1002.0754 315.43933 1000.318 313.68198 c
998.56067 311.92462 998.56067 309.07538 1000.318 307.31802 c
1002.0754 305.56067 1004.9246 305.56067 1006.682 307.31802 c
S
0 i
CM
126.27946 247.68198 m
128.03683 245.92462 128.03683 243.07538 126.27946 241.31802 c
124.5221 239.56065 121.67287 239.56065 119.9155 241.31802 c
118.15814 243.07538 118.15814 245.92462 119.9155 247.68198 c
121.67287 249.43935 124.5221 249.43935 126.27946 247.68198 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
984.27948 190.31802 m
986.0368 192.07538 986.0368 194.92462 984.27948 196.68198 c
982.52209 198.43935 979.67285 198.43935 977.91553 196.68198 c
976.15814 194.92462 976.15814 192.07538 977.91553 190.31802 c
979.67285 188.56065 982.52209 188.56065 984.27948 190.31802 c
S
0 i
CM
64.537323 146.16626 m
66.294693 144.40889 66.294693 141.55966 64.537323 139.80231 c
62.779964 138.04494 59.930725 138.04494 58.17337 139.80231 c
56.416 141.55966 56.416 144.40889 58.17337 146.16626 c
59.930725 147.92361 62.779964 147.92361 64.537323 146.16626 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
922.53729 291.83374 m
924.29468 293.59109 924.29468 296.44034 922.53729 298.19769 c
920.77997 299.95508 917.93073 299.95508 916.17334 298.19769 c
914.41602 296.44034 914.41602 293.59109 916.17334 291.83374 c
917.93073 290.07639 920.77997 290.07639 922.53729 291.83374 c
S
0 i
CM
31.681976 106.1977 m
33.439342 104.44035 33.439342 101.5911 31.681976 99.833748 c
29.92462 98.076378 27.07538 98.076378 25.318024 99.833748 c
23.560656 101.5911 23.560656 104.44035 25.318024 106.1977 c
27.07538 107.95507 29.92462 107.95507 31.681976 106.1977 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
889.68201 331.80231 m
891.43933 333.55966 891.43933 336.40891 889.68201 338.16626 c
887.92462 339.92361 885.07538 339.92361 883.31799 338.16626 c
881.56067 336.40891 881.56067 333.55966 883.31799 331.80231 c
885.07538 330.04492 887.92462 330.04492 889.68201 331.80231 c
S
0 i
CM
92.070351 53.883041 m
93.827713 52.125683 93.827713 49.276443 92.070351 47.519089 c
90.312988 45.761719 87.463753 45.761719 85.70639 47.519089 c
83.949028 49.276443 83.949028 52.125683 85.70639 53.883041 c
87.463753 55.640408 90.312988 55.640408 92.070351 53.883041 c
f
0.60000002 i
1 0 0 -1 -858 438 cm
950.07037 384.11697 m
951.8277 385.87433 951.8277 388.72354 950.07037 390.48093 c
948.31299 392.23828 945.46375 392.23828 943.70642 390.48093 c
941.94904 388.72354 941.94904 385.87433 943.70642 384.11697 c
945.46375 382.35959 948.31299 382.35959 950.07037 384.11697 c
S
[
8
5
] 0 d
980.8634 207.89906 m
979.93591 275.10437 l
S
0 i
CM
121.82554 154.89641 m
124.93565 162.85425 l
118.93622 162.93704 l
h
121.82554 154.89641 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -858 438 cm
979.82556 283.10361 m
982.93567 275.14575 l
976.93622 275.06296 l
h
979.82556 283.10361 m
S
CM
122.97379 238.10017 m
119.86368 230.14233 l
125.86311 230.05954 l
h
122.97379 238.10017 m
f
1 0 0 -1 -858 438 cm
980.97375 199.89983 m
977.86365 207.85767 l
983.8631 207.94046 l
h
980.97375 199.89983 m
S
1 J
1 j
[
8
5
] 0 d
0.60000002 i
1227.7572 308.17786 m
1227.9386 368.10004 l
S
0 i
CM
369.9628 61.89999 m
372.93857 69.909035 l
366.9386 69.890869 l
h
369.9628 61.89999 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -858 438 cm
1227.9628 376.10001 m
1230.9386 368.09097 l
1224.9386 368.10913 l
h
1227.9628 376.10001 m
S
CM
369.73294 137.82211 m
366.7572 129.81308 l
372.75717 129.83124 l
h
369.73294 137.82211 m
f
1 0 0 -1 -858 438 cm
1227.7329 300.17789 m
1224.7572 308.18692 l
1230.7572 308.16876 l
h
1227.7329 300.17789 m
S
/Cs3 SC
1 1 1 sc
CM
353.31244 117.7963 m
366.31244 117.7963 l
366.31244 81.796303 l
353.31244 81.796303 l
h
f
0.13333334 0.13333334 0.13333334 sc
1 0 0 -1 359.81244 99.796303 cm
-6.5 11.080002 m
(#)s
1 1 1 sc
CM
97.031448 216.1761 m
120.53145 216.1761 l
120.53145 180.1761 l
97.031448 180.1761 l
h
f
/Cs1 SC
0.10051589 0.10051288 0.10051461 sc
1 0 0 -1 109.03145 198.1761 cm
-12 11.080002 m
(#$)[ 12.990000 0.000000 ] xS
1 J
1 j
[
8
5
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -858 438 cm
1296.0531 252.89986 m
1296.1882 278.10013 l
S
0 i
CM
438.23117 151.89998 m
441.1882 159.91595 l
435.18829 159.88377 l
h
438.23117 151.89998 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -858 438 cm
1296.2312 286.10004 m
1299.1882 278.08405 l
1293.1884 278.11624 l
h
1296.2312 286.10004 m
S
CM
438.01019 193.10002 m
435.05313 185.08405 l
441.05304 185.11623 l
h
438.01019 193.10002 m
f
1 0 0 -1 -858 438 cm
1296.0101 244.89998 m
1293.0531 252.91595 l
1299.0531 252.88377 l
h
1296.0101 244.89998 m
S
/Cs3 SC
1 1 1 sc
CM
441.11322 194.14465 m
455.61322 194.14465 l
455.61322 158.14465 l
441.11322 158.14465 l
h
f
/Cs1 SC
0.10051589 0.10051288 0.10051461 sc
1 0 0 -1 448.61322 176.14465 cm
-7.5 11.080002 m
(%)s
ep
end
%%Trailer
%%EOF
